# .github/workflows/release.yml
name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # PROPERLY INDENTED UNDER 'push:'
  workflow_dispatch: {}  # Allows manual triggering

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux x64
            os: ubuntu-latest
            asset_suffix: linux-x64
            archive_ext: tar.gz
          - name: Windows x64
            os: windows-latest
            asset_suffix: windows-x64
            archive_ext: zip
          - name: macOS Intel
            os: macos-13
            asset_suffix: macos-intel
            archive_ext: tar.gz
          - name: macOS Apple Silicon
            os: macos-latest
            asset_suffix: macos-arm64
            archive_ext: tar.gz
    
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
        
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
        
      - name: Build with CMake
        run: cmake --build build --config Release
        
      - name: Prepare Artifacts for Upload
        shell: bash
        run: |
          # Create a directory to hold the assets
          mkdir dist
          
          # Define the executable name and copy it to the 'dist' directory
          EXECUTABLE_NAME="tim2dump"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp "build/Release/${EXECUTABLE_NAME}.exe" dist/
          else
            cp "build/${EXECUTABLE_NAME}" dist/
          fi
          
          # Determine version name for archive
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          elif [[ "${{ github.ref }}" == refs/heads/release-* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.sha }}"
            VERSION="${VERSION:0:7}"  # Use short SHA for non-release branches
          fi
          
          # Create the archive
          ARCHIVE_NAME="tim2dump-${VERSION}-${{ matrix.platform.asset_suffix }}"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cd dist && 7z a "../${ARCHIVE_NAME}.zip" * && cd ..
            # Create checksum for zip
            certutil -hashfile "${ARCHIVE_NAME}.zip" SHA256 > "${ARCHIVE_NAME}.zip.sha256"
          else
            cd dist && tar -czf "../${ARCHIVE_NAME}.tar.gz" * && cd ..
            # Create checksum for tar.gz
            sha256sum "${ARCHIVE_NAME}.tar.gz" > "${ARCHIVE_NAME}.tar.gz.sha256"
          fi
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tim2dump-${{ matrix.platform.asset_suffix }}
          path: |
            *.${{ matrix.platform.archive_ext }}
            *.sha256

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    # Create releases ONLY for version tags
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Collect all checksums
        shell: bash
        run: |
          # Collect all checksums into one file
          echo "# SHA256 Checksums for ${{ github.ref_name }}" > checksums.txt
          echo "" >> checksums.txt
          for file in artifacts/**/*.sha256; do
            if [ -f "$file" ]; then
              cat "$file" >> checksums.txt
              echo "" >> checksums.txt
            fi
          done
          
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            artifacts/**/*.zip
            artifacts/**/*.tar.gz
            artifacts/**/*.sha256
            checksums.txt